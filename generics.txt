Generics

Rust provides support for an important language feature known as generics. With generics,
functions can be written that can work with a wide variety of types, along with types,
structs, and enums. Here's what generic funtion, struct, type, and enum would look like.

<CODE>

// a function
// there's an error here!
fn fill_a_vector<T>(param: &T) -> Vec<T> {
	let mut a_vec: Vec<T> = Vec::new();
	let the_param = param.clone();
	for _ in range(0,5) {
		a_vec.push(the_param); 
	}
	a_vec
}

// a type
type SingleTypeMap<T> = std::collections:HashMap<T, T>;

// a struct
struct Node<T> {
	val: T,
	next: Option<Node<T>>
}

// an enum
enum vec_or_map<T> {
	Vec<T>,
	std::collections::HashMap<T, T>
}

</CODE> 

Looking good, with the exception of the mentioned error. T is called the type parameter, and
conventionally they are single capital letters. That's not all there is to type parameters,
though, which is the problem with the function example. Here's what would happen if we
would try to compile the following code.

<CODE>

fn fill_a_vector<T>(param: &T) -> Vec<T> {
	let mut a_vec: Vec<T> = Vec::new();
	let the_param = param.clone();
	for _ in range(0,5) {
		a_vec.push(the_param); 
	}
	a_vec
}

</CODE>

<CODE>

generics.rs:7:14: 7:23 error: mismatched types: expected `T` but found `&T` (expected type parameter but found &-ptr)
generics.rs:7 		a_vec.push(the_param); 

</CODE>

What's that? But the_param is a clone of param, so it is of type T and not &T, right? The 
problem is that the compiler never really clones param because T isn't a clonable type. 
Here's how we make sure T is a clonable type. 

<CODE>

fn fill_a_vector<T: Clone>(param: &T) -> Vec<T> {
	let mut a_vec: Vec<T> = Vec::new();
	let the_param = param.clone();
	for _ in range(0,5) {
		a_vec.push(the_param); 
	}
	a_vec
}  

</CODE>

We're not out of the words yet, though. Trying to compile this gives us this error.

<CODE>

generics.rs:7:14: 7:23 error: use of moved value: `the_param`
generics.rs:7 		a_vec.push(the_param); 
              		           ^~~~~~~~~
generics.rs:7:14: 7:23 note: `the_param` moved here because it has type `T`, which is non-copyable (perhaps you meant to use clone()?)
generics.rs:7 		a_vec.push(the_param); 

</CODE>

Ah, we need to make sure T is copyable, too. Here we go.

<CODE>

fn fill_a_vector<T: Clone + Copy>(param: &T) -> Vec<T> {
	let mut a_vec: Vec<T> = Vec::new();
	let the_param = param.clone();
	for _ in range(0,5) {
		a_vec.push(the_param); 
	}
	a_vec
}

</CODE>

