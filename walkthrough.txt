As a final exercise in this tutorial, we are going to implement a version of MapReduce
in Rust. MapReduce is a parallel computing framework for processing and generating large
amounts of data. It was originally developed by Google, and now there are many similar 
frameworks, one popular one being Apache Hadoop.

There are two obvious main parts to MapReduce, the Map and the Reduce. In the Map portion,
a provided function is applied to each member of a set of data, producing a set of 
(key, value) pairs. In the Reduce portion, a provided function sums or collects the values
for each unique key. In between these operations is a third main part in which the
intermediate set of (key, value) pairs is made into a mapping of unique keys to a list of
their values. The important part of all this is that the Map and Reduce portions are done
in parallel. For the Map portion, each member of the original set of data gets the
provided function applied to it in a distinct thread (or rather, since we are Rust folk, 
in a distinct task). For the Reduce portion, each key has its values aggregated by the 
reduce function in a distinct thread (again, task).

An example problem that can be handled by MapReduce is counting the occurrences of words
in a set of strings. This is the example we are going to tackle in this exercise. To start
off with, let's see how we might design the MapReduce framework as a Rust trait.

<CODE>

trait MapReduce {
	fn mapreduce<K, V>(&mut self, fn(&String) -> Vec<(K,V)>, fn(K, Vec<V>) => Vec<(K,V)>);
}

</CODE>

Our trait has just one function, mapreduce, that has two type parameters, K(ey) and V(alue),
and takes in two functions as paramters. The first is the map function which takes a 
&String (String is std::string::String, a string buffer type) and returns a vector of 
K,V tuples. It may seem like we're cheating a little bit by having the map function take a
String, and it is convenient for the problem we're going to handle, but all we're really 
doing is saying the information must be provide in String form; as long the map function
is able to parse it and create (key, value) pairs as desired, we haven't really limited the
scope of things we can do. The second function is, of course, the reduce function, which takes
a key of type K and a vector of values of type V and returns what will be a vector of a 
single K,V tuple.

Now to start to implement our trait. We're also going to add bounds to our type parameters, so that
we can guarantee that the types have implemented certain traits, allowing us to do things
with our now bounded generic types in our code like compare the for equality, or send values 
across tasks.

<CODE>

use std::fmt::Show;
use std::hash::Hash;

trait MapReduce {
	fn mapreduce<K: Clone + Show + Hash + Equiv<K> + Eq + Send, V: Clone + Show + Send>(&mut self, fn(&String) -> Vec<(K, V)>, 
		fn(K, Vec<V>) -> Vec<(K, V)>);
}

impl MapReduce for Vec<String> {
	fn mapreduce<K: Clone + Show + Hash + Equiv<K> + Eq + Send, V: Clone + Show + Send>(&mut self, mapf: fn(&String) -> Vec<(K, V)>, 
		redf: fn(K, Vec<V>) -> Vec<(K, V)>) {
		
		let (sender, receiver): (Sender<Vec<(K, V)>>, Receiver<Vec<(K, V)>>) = channel();
		let mut tasks: int = 0;
		
		// map 
		for item in self.iter() {
			tasks += 1;			
			let item_owned = item.clone();
			let sender_child = sender.clone();
			spawn(proc() {			
				sender_child.send(mapf(&item_owned));
			});
		}
		
		// more code
	}		
}

</CODE>

We set up a (Sender, Receiver) pair and then, for each member in the set of data (in our case, 
for each String in the vector), we clone the Sender (each task needs its own handle to it) 
and spawn a task in which we send back the results of mapping that member. We have to clone 
item to get an owned value because borrowed values aren't sendable, and thus can't be used 
across tasks (we're free to borrow the owned value inside the task, though).

Next we have to collect the intermediate (key, value) pairs into a mapping of unique keys
to a list of all of their associated values.

<CODE>
extern crate collections;
use collections::HashMap;
use std::fmt::Show;
use std::hash::Hash;

.
.
.
		// map 
		for item in self.iter() {
			tasks += 1;			
			let item_owned = item.clone();
			let sender_child = sender.clone();
			spawn(proc() {			
				sender_child.send(mapf(&item_owned));
			});
		}
		
		// intermediate 
		let mut kv_map: HashMap<K, Vec<V>> = HashMap::new();
		for _ in range(0, tasks) {
			let ivals: Vec<(K, V)> = receiver.recv();
			for pair in ivals.iter() {
				let mut key: K;
				let mut val: V;
				match pair.clone() {
					(a, b) => {
						key = a.clone();
						val = b.clone();
					}
				}
				
				if kv_map.contains_key_equiv(&key) {
					kv_map.get_mut(&key).push(val);
				}
				else {
					kv_map.find_or_insert(key, vec!(val));
				}
			}		
		}
		
		// mode code
	}
}

</CODE>

We go and get ourselves a HashMap, and then for each member we mapped (0 to the number of tasks), we get 
the list of pairs from the most recently finished task with receiver.recv(), and build up 
the HashMap after destructuring the pairs with pattern matching. 

That was simple enough. Now for reducing.

<CODE>
.
.
.
		// intermediate 
		let mut kv_map: HashMap<K, Vec<V>> = HashMap::new();
		for _ in range(0, tasks) {
			let ivals: Vec<(K, V)> = receiver.recv();
			for pair in ivals.iter() {
				let mut key: K;
				let mut val: V;
				match pair.clone() {
					(a, b) => {
						key = a.clone();
						val = b.clone();
					}
				}
				
				if kv_map.contains_key_equiv(&key) {
					kv_map.get_mut(&key).push(val);
				}
				else {
					kv_map.find_or_insert(key, vec!(val));
				}
			}		
		}
			
		// reduce
		tasks = 0;
		for key in kv_map.keys() {
			tasks += 1;
			let vals = kv_map.get(key).clone();
			let key_owned = key.clone();
			let sender_child = sender.clone();
			spawn(proc() {
				sender_child.send(redf(key_owned, vals));
			});		
		}
		
		// print final values
		for _ in range(0, tasks) {
			let rvals: Vec<(K, V)> = receiver.recv();
			println!("{}", rvals);
		}		
	}
}

</CODE>

We set the task counter back to 0, as it is now going to increment with the number of 
unique keys. For each key, we get owned versions of the key and the values of that key and 
another handle to the sender, and then reduce (redf) with the key and its values in a distinct
task, sending the result back. To top it all off, we print the final values after receiving
them from each task.

Now that we have our trait and an implementation for it, let's do something with them, and
go count some words!

<CODE>

fn main() {
	// some strings with some words
	let mut strings: Vec<String> = vec!("these are a bunch of words".to_string(), 
		"those are a bunch of words too".to_string(), 
		"lots of words".to_string(),
		"there certainly are a lot of words floating around here".to_string(),
		"never before have I seen so many words just sitting about".to_string(),
		"with not a thing to do".to_string());

	// function for map
	fn create_pairs(s: &String) -> Vec<(String, int)> {
		// code
	}
	
	// function for reduce
	fn reduce_pairs(key: String, vals: Vec<int>) -> Vec<(String, int)> {
		// code
	}
	
	// let's do it
	strings.mapreduce::<String,int>(create_pairs, reduce_pairs);	
}

</CODE>

For some simple input we snag a few strings. Now we have to implement our functions for 
mapping and reducing, so we can pass them to mapreduce. Let's take a look at how we're going
to write these functions.

<CODE>

	// function for map
	fn create_pairs(s: &String) -> Vec<(String, int)> {
		let mut retvals: Vec<(String,int)> = vec!(); 
		for word in s.as_slice().split(' ') {
			retvals.push((word.to_string(), 1));
		}
		retvals
	}
	
	// function for reduce
	fn reduce_pairs(key: String, vals: Vec<int>) -> Vec<(String, int)> {
		let mut total: int = 0;
		for val in vals.iter() {
			total += *val;
		}
		vec!((key, total))
	}

</CODE>

Since we're using some simple input in this example, we're only splitting the string 
by a single space instead of handling punctuation or bigger spaces. Then for each "word"
created by our split, we push a pair of ("word", 1) into our return values vector. When our
reduce function gets called, every ("word", 1) pair has been aggregated into a 
"word" : [1, 1, ..] mapping, so all reduce_pairs has to do is sum up the 1's and hand back 
a list with a single pair of ("word", total)!

Let's put it all together and check out the output.

<CODE>

extern crate collections;
use std::fmt::Show; 
use std::hash::Hash;
use collections::HashMap;

fn main() {
	
	// some strings with some words
	let mut strings: Vec<String> = vec!("these are a bunch of words".to_string(), 
		"those are a bunch of words too".to_string(), 
		"lots of words".to_string(),
		"there certainly are a lot of words floating around here".to_string(),
		"never before have I seen so many words just sitting about".to_string(),
		"with not a thing to do".to_string());
	
	// function for map
	fn create_pairs(s: &String) -> Vec<(String, int)> {
		let mut retvals: Vec<(String,int)> = vec!(); 
		for word in s.as_slice().split(' ') {
			retvals.push((word.to_string(), 1));
		}
		retvals
	}
	
	// function for reduce
	fn reduce_pairs(key: String, vals: Vec<int>) -> Vec<(String, int)> {
		let mut total: int = 0;
		for val in vals.iter() {
			total += *val;
		}
		vec!((key, total))
	}
	
	// let's do it
	strings.mapreduce::<String,int>(create_pairs, reduce_pairs);	
}

trait MapReduce {
	fn mapreduce<K: Clone + Show + Hash + Equiv<K> + Eq + Send, V: Clone + Show + Send>(&mut self, fn(&String) -> Vec<(K, V)>, 
		fn(K, Vec<V>) -> Vec<(K, V)>);
}

impl MapReduce for Vec<String> {
	fn mapreduce<K: Clone + Show + Hash + Equiv<K> + Eq + Send, V: Clone + Show + Send>(&mut self, mapf: fn(&String) -> Vec<(K, V)>, 
		redf: fn(K, Vec<V>) -> Vec<(K, V)>) {
		
		let (sender, receiver): (Sender<Vec<(K, V)>>, Receiver<Vec<(K, V)>>) = channel();
		let mut tasks: int = 0;
		
		// map 
		for item in self.iter() {
			tasks += 1;			
			let item_owned = item.clone();
			let sender_child = sender.clone();
			spawn(proc() {			
				sender_child.send(mapf(&item_owned));
			});
		}
		
		// intermediate 
		let mut kv_map: HashMap<K, Vec<V>> = HashMap::new();
		for _ in range(0, tasks) {
			let ivals: Vec<(K, V)> = receiver.recv();
			for pair in ivals.iter() {
				let mut key: K;
				let mut val: V;
				match pair.clone() {
					(a, b) => {
						key = a.clone();
						val = b.clone();
					}
				}
				
				if kv_map.contains_key_equiv(&key) {
					kv_map.get_mut(&key).push(val);
				}
				else {
					kv_map.find_or_insert(key, vec!(val));
				}
			}		
		}
			
		// reduce
		tasks = 0;
		for key in kv_map.keys() {
			tasks += 1;
			let vals = kv_map.get(key).clone();
			let key_owned = key.clone();
			let sender_child = sender.clone();
			spawn(proc() {
				sender_child.send(redf(key_owned, vals));
			});		
		}
		
		// print final values
		for _ in range(0, tasks) {
			let rvals: Vec<(K, V)> = receiver.recv();
			println!("{}", rvals);
		}		
	}
}	

</CODE>

Output:
<CODE>

[(never, 1)]
[(do, 1)]
[(a, 4)]
[(lot, 1)]
[(are, 3)]
[(thing, 1)]
[(with, 1)]
[(before, 1)]
[(of, 4)]
[(these, 1)]
[(those, 1)]
[(just, 1)]
[(there, 1)]
[(sitting, 1)]
[(about, 1)]
[(have, 1)]
[(too, 1)]
[(not, 1)]
[(lots, 1)]
[(many, 1)]
[(seen, 1)]
[(words, 5)]
[(so, 1)]
[(here, 1)]
[(I, 1)]
[(certainly, 1)]
[(bunch, 2)]
[(around, 1)]
[(to, 1)]
[(floating, 1)]

</CODE>
  





 

